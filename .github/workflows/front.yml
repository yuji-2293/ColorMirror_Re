name: Front CI

on:
  workflow_dispatch:
  pull_request:
    branches: ["main"]
    paths:
      - "front/**"
      - ".github/workflows/front.yml"
  push:
    branches: ["main"]
    paths:
      - "front/**"
      - ".github/workflows/front.yml"
defaults:
  run:
    working-directory: front/App_front

env:
  NODE_VERSION: "23.10.0"
  PNPM_VERSION: "10.13.1"
  DEBUG_MESSAGE: "hello from front CI"

jobs:
  Launch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
          cache-dependency-path: front/App_front/pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install

  lint:
    needs: Launch
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
          cache-dependency-path: front/App_front/pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install
      - run: pnpm lint
        env:
          DEBUG_MESSAGE: ${{ env.DEBUG_MESSAGE }}
  format:
    needs: Launch
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
          cache-dependency-path: front/App_front/pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install

      - name: Prettier check
        run: pnpm prettier --check .

  typecheck:
    needs: Launch
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
          cache-dependency-path: front/App_front/pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install
      - name: Typecheck
        run: pnpm tsc --noEmit

  deploy-production:
    needs: [lint, format, typecheck]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
          cache-dependency-path: front/App_front/pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install

      - name: install Vercel CLI
        run: pnpm add -g vercel@latest --allow-build=esbuild

      - name: Pull Vercel environment variables
        run: vercel pull --yes --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Set Vercel Enviroment Variables
        run: |
          vercel env rm DEBUG_MESSAGE production --yes --token=${{ secrets.VERCEL_TOKEN }} || true
          echo "${{ env.DEBUG_MESSAGE }}" | vercel env add DEBUG_MESSAGE production --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Verfy Vercel Enviroment Variables
        run: |
          echo "Environment Variables:"
          vercel env ls --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      - name: Build Project
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy to Vercel
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          DEBUG_MESSAGE: ${{ env.DEBUG_MESSAGE }}
        run: |
          vercel deploy --prod prebuilt --token=${{ secrets.VERCEL_TOKEN }}
